syntax on

" No vi-compatible
set nocompatible

" Encoding
set encoding=utf-8
set fileencoding=utf-8

set backspace=indent,eol,start
set cursorline
set whichwrap=<,>,[,]
set wildmenu
set nu
set noshowmode

" Search
set hlsearch
set ignorecase
set foldenable

" Tab setting
set tabstop=4
set expandtab
set shiftwidth=4
set softtabstop=4

" Auto indent
set autoindent
set smarttab

" Status line
set laststatus=2

" Set listchars
set listchars=tab:>-,trail:.
set list

" Background
set background=dark
"set background=light

" Color scheme
let g:solarized_termcolors = 256
let g:solarized_termtrans = 1
let g:solarized_degrade = 0
let g:solarized_bold = 1
let g:solarized_underline = 1
let g:solarized_italic = 1
let g:solarized_contrast = "normal"
let g:solarized_visibility= "normal"
colorscheme solarized
set t_Co=256

" Ctags
set tags=./tags;/

" Key mapping
nmap <leader>d :NERDTreeTabsToggle<CR>
nmap <leader>t :TagbarToggle<CR>


"""""""""""
" Plugins
"""""""""""
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#rc()

Plugin 'VundleVim/Vundle.vim'
Plugin 'itchyny/lightline.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree.git'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'majutsushi/tagbar'
"Plugin 'vim-airline/vim-airline'
"Plugin 'vim-airline/vim-airline-themes'

filetype plugin indent on

"""""""""""""""""""
" Taglist setting
"""""""""""""""""""
let Tlist_Show_One_File = 1
let Tlist_Exist_OnlyWindow = 1
let Tlist_Use_Right_Window = 1

"""""""""""""""""""""
" Lightline setting
"""""""""""""""""""""
let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left': [
    \       ['mode', 'paste'],
    \       ['fugitive', 'readonly', 'filename', 'modified'],
    \   ]
    \ },
    \ 'component': {
    \   'fugitive': '%{exists("*fugitive#head") ? fugitive#head() : ""}'
    \ },
    \ 'component_visible_condition': {
    \   'fugitive': '(exists("*fugitive#head") && "" != fugitive#head())'
    \ }
    \ }

augroup LightLineColorscheme
    autocmd!
    autocmd ColorScheme * call s:lightline_update()
augroup END
function! s:lightline_update()
    if !exists('g:loaded_lightline')
        return
    endif
    try
        if g:colors_name =~# 'wombat\|solarized\|landscape\|jellybeans\|seoul256\|Tomorrow'
            let g:lightline.colorscheme =
                \ substitute(substitute(g:colors_name, '-', '_', 'g'), '256.*', '', '') .
                \ (g:colors_name ==# 'solarized' ? '_' . &background : '')
            call lightline#init()
            call lightline#colorscheme()
            call lightline#update()
        endif
    catch
    endtry
endfunction

""""""""""""
" NERDTree
""""""""""""
"autocmd VimEnter * NERDTree
"autocmd VimEnter * wincmd p
let g:nerdtree_tabs_open_on_console_startup=1

"""""""""""""""
" Vim-airline
"""""""""""""""
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'
"let g:airline#extensions#tabline#buffer_nr_show = 1
"let g:airline_theme='wombat'

